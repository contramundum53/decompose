// This file is automatically generated by include/decompose/generate_decompose_with_structured_binding.py.
// DateTime: 2022-06-18 04:47:27.761877

#pragma once

#include <utility>
#include <type_traits>
namespace decompose::detail{

template <class... Ts>
struct overload_t : Ts... {
    overload_t(const Ts&... ts) : Ts(std::move(ts))... {}
    using Ts::operator()...;
};

struct any{
    template<class T>
    any(T&& t) {}
};
}
namespace decompose{
/** @brief Decompose a struct/array/tuple with structured binding and call `f` with the decomposed elements.
  * @param t The struct/array/tuple to decompose.
  * @param f The function to call with the decomposed elements.
  * @return The return value of `f`.
*/
template<class T, class F>
constexpr decltype(auto) decompose_with_structured_binding(T&& t, F&& f){
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wempty-decomposition"

    auto c_error = [&]<class = void>(detail::any&&){
        static_assert([]{return false;}(), 
            "T could not be decomposed by structured binding. "
            "Possible causes: "
            "1. T has a private/protected field. "
            "2. T's fields come from different base classes. "
            "3. T has a field of an anonymous union type. "
            "4. T has more than `max_n`(= 50) fields. "
            "In the last case, you can increase the size of `max_n` in " 
            "include/decompose/generate_decompose_with_structured_binding.py and regenerate the code.\n");
    };
    auto c0 = [](auto&& t) -> decltype(({
                auto&& [] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 0>();
            })) {
        return {};
    };
    auto f0 = [](std::integral_constant<int, 0>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)();
    };
    auto c1 = [](auto&& t) -> decltype(({
                auto&& [_0] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 1>();
            })) {
        return {};
    };
    auto f1 = [](std::integral_constant<int, 1>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0));
    };
    auto c2 = [](auto&& t) -> decltype(({
                auto&& [_0, _1] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 2>();
            })) {
        return {};
    };
    auto f2 = [](std::integral_constant<int, 2>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1));
    };
    auto c3 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 3>();
            })) {
        return {};
    };
    auto f3 = [](std::integral_constant<int, 3>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2));
    };
    auto c4 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 4>();
            })) {
        return {};
    };
    auto f4 = [](std::integral_constant<int, 4>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3));
    };
    auto c5 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 5>();
            })) {
        return {};
    };
    auto f5 = [](std::integral_constant<int, 5>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4));
    };
    auto c6 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 6>();
            })) {
        return {};
    };
    auto f6 = [](std::integral_constant<int, 6>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5));
    };
    auto c7 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 7>();
            })) {
        return {};
    };
    auto f7 = [](std::integral_constant<int, 7>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6));
    };
    auto c8 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 8>();
            })) {
        return {};
    };
    auto f8 = [](std::integral_constant<int, 8>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7));
    };
    auto c9 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 9>();
            })) {
        return {};
    };
    auto f9 = [](std::integral_constant<int, 9>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8));
    };
    auto c10 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 10>();
            })) {
        return {};
    };
    auto f10 = [](std::integral_constant<int, 10>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9));
    };
    auto c11 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 11>();
            })) {
        return {};
    };
    auto f11 = [](std::integral_constant<int, 11>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10));
    };
    auto c12 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 12>();
            })) {
        return {};
    };
    auto f12 = [](std::integral_constant<int, 12>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11));
    };
    auto c13 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 13>();
            })) {
        return {};
    };
    auto f13 = [](std::integral_constant<int, 13>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12));
    };
    auto c14 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 14>();
            })) {
        return {};
    };
    auto f14 = [](std::integral_constant<int, 14>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13));
    };
    auto c15 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 15>();
            })) {
        return {};
    };
    auto f15 = [](std::integral_constant<int, 15>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14));
    };
    auto c16 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 16>();
            })) {
        return {};
    };
    auto f16 = [](std::integral_constant<int, 16>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15));
    };
    auto c17 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 17>();
            })) {
        return {};
    };
    auto f17 = [](std::integral_constant<int, 17>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16));
    };
    auto c18 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 18>();
            })) {
        return {};
    };
    auto f18 = [](std::integral_constant<int, 18>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17));
    };
    auto c19 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 19>();
            })) {
        return {};
    };
    auto f19 = [](std::integral_constant<int, 19>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18));
    };
    auto c20 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 20>();
            })) {
        return {};
    };
    auto f20 = [](std::integral_constant<int, 20>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19));
    };
    auto c21 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 21>();
            })) {
        return {};
    };
    auto f21 = [](std::integral_constant<int, 21>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20));
    };
    auto c22 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 22>();
            })) {
        return {};
    };
    auto f22 = [](std::integral_constant<int, 22>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21));
    };
    auto c23 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 23>();
            })) {
        return {};
    };
    auto f23 = [](std::integral_constant<int, 23>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22));
    };
    auto c24 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 24>();
            })) {
        return {};
    };
    auto f24 = [](std::integral_constant<int, 24>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23));
    };
    auto c25 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 25>();
            })) {
        return {};
    };
    auto f25 = [](std::integral_constant<int, 25>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24));
    };
    auto c26 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 26>();
            })) {
        return {};
    };
    auto f26 = [](std::integral_constant<int, 26>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25));
    };
    auto c27 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 27>();
            })) {
        return {};
    };
    auto f27 = [](std::integral_constant<int, 27>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26));
    };
    auto c28 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 28>();
            })) {
        return {};
    };
    auto f28 = [](std::integral_constant<int, 28>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27));
    };
    auto c29 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 29>();
            })) {
        return {};
    };
    auto f29 = [](std::integral_constant<int, 29>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28));
    };
    auto c30 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 30>();
            })) {
        return {};
    };
    auto f30 = [](std::integral_constant<int, 30>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29));
    };
    auto c31 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 31>();
            })) {
        return {};
    };
    auto f31 = [](std::integral_constant<int, 31>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30));
    };
    auto c32 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 32>();
            })) {
        return {};
    };
    auto f32 = [](std::integral_constant<int, 32>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31));
    };
    auto c33 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 33>();
            })) {
        return {};
    };
    auto f33 = [](std::integral_constant<int, 33>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32));
    };
    auto c34 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 34>();
            })) {
        return {};
    };
    auto f34 = [](std::integral_constant<int, 34>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33));
    };
    auto c35 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 35>();
            })) {
        return {};
    };
    auto f35 = [](std::integral_constant<int, 35>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34));
    };
    auto c36 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 36>();
            })) {
        return {};
    };
    auto f36 = [](std::integral_constant<int, 36>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35));
    };
    auto c37 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 37>();
            })) {
        return {};
    };
    auto f37 = [](std::integral_constant<int, 37>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36));
    };
    auto c38 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 38>();
            })) {
        return {};
    };
    auto f38 = [](std::integral_constant<int, 38>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37));
    };
    auto c39 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 39>();
            })) {
        return {};
    };
    auto f39 = [](std::integral_constant<int, 39>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38));
    };
    auto c40 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 40>();
            })) {
        return {};
    };
    auto f40 = [](std::integral_constant<int, 40>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39));
    };
    auto c41 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 41>();
            })) {
        return {};
    };
    auto f41 = [](std::integral_constant<int, 41>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40));
    };
    auto c42 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 42>();
            })) {
        return {};
    };
    auto f42 = [](std::integral_constant<int, 42>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40), std::forward<decltype(_41)>(_41));
    };
    auto c43 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 43>();
            })) {
        return {};
    };
    auto f43 = [](std::integral_constant<int, 43>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40), std::forward<decltype(_41)>(_41), std::forward<decltype(_42)>(_42));
    };
    auto c44 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 44>();
            })) {
        return {};
    };
    auto f44 = [](std::integral_constant<int, 44>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40), std::forward<decltype(_41)>(_41), std::forward<decltype(_42)>(_42), std::forward<decltype(_43)>(_43));
    };
    auto c45 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 45>();
            })) {
        return {};
    };
    auto f45 = [](std::integral_constant<int, 45>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40), std::forward<decltype(_41)>(_41), std::forward<decltype(_42)>(_42), std::forward<decltype(_43)>(_43), std::forward<decltype(_44)>(_44));
    };
    auto c46 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 46>();
            })) {
        return {};
    };
    auto f46 = [](std::integral_constant<int, 46>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40), std::forward<decltype(_41)>(_41), std::forward<decltype(_42)>(_42), std::forward<decltype(_43)>(_43), std::forward<decltype(_44)>(_44), std::forward<decltype(_45)>(_45));
    };
    auto c47 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 47>();
            })) {
        return {};
    };
    auto f47 = [](std::integral_constant<int, 47>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40), std::forward<decltype(_41)>(_41), std::forward<decltype(_42)>(_42), std::forward<decltype(_43)>(_43), std::forward<decltype(_44)>(_44), std::forward<decltype(_45)>(_45), std::forward<decltype(_46)>(_46));
    };
    auto c48 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 48>();
            })) {
        return {};
    };
    auto f48 = [](std::integral_constant<int, 48>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40), std::forward<decltype(_41)>(_41), std::forward<decltype(_42)>(_42), std::forward<decltype(_43)>(_43), std::forward<decltype(_44)>(_44), std::forward<decltype(_45)>(_45), std::forward<decltype(_46)>(_46), std::forward<decltype(_47)>(_47));
    };
    auto c49 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 49>();
            })) {
        return {};
    };
    auto f49 = [](std::integral_constant<int, 49>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40), std::forward<decltype(_41)>(_41), std::forward<decltype(_42)>(_42), std::forward<decltype(_43)>(_43), std::forward<decltype(_44)>(_44), std::forward<decltype(_45)>(_45), std::forward<decltype(_46)>(_46), std::forward<decltype(_47)>(_47), std::forward<decltype(_48)>(_48));
    };
    auto c50 = [](auto&& t) -> decltype(({
                auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49] = std::forward<decltype(t)>(t);
                std::integral_constant<int, 50>();
            })) {
        return {};
    };
    auto f50 = [](std::integral_constant<int, 50>, auto&& t, auto&& f) -> decltype(auto) {
        auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49] = std::forward<decltype(t)>(t);
        return std::forward<decltype(f)>(f)(std::forward<decltype(_0)>(_0), std::forward<decltype(_1)>(_1), std::forward<decltype(_2)>(_2), std::forward<decltype(_3)>(_3), std::forward<decltype(_4)>(_4), std::forward<decltype(_5)>(_5), std::forward<decltype(_6)>(_6), std::forward<decltype(_7)>(_7), std::forward<decltype(_8)>(_8), std::forward<decltype(_9)>(_9), std::forward<decltype(_10)>(_10), std::forward<decltype(_11)>(_11), std::forward<decltype(_12)>(_12), std::forward<decltype(_13)>(_13), std::forward<decltype(_14)>(_14), std::forward<decltype(_15)>(_15), std::forward<decltype(_16)>(_16), std::forward<decltype(_17)>(_17), std::forward<decltype(_18)>(_18), std::forward<decltype(_19)>(_19), std::forward<decltype(_20)>(_20), std::forward<decltype(_21)>(_21), std::forward<decltype(_22)>(_22), std::forward<decltype(_23)>(_23), std::forward<decltype(_24)>(_24), std::forward<decltype(_25)>(_25), std::forward<decltype(_26)>(_26), std::forward<decltype(_27)>(_27), std::forward<decltype(_28)>(_28), std::forward<decltype(_29)>(_29), std::forward<decltype(_30)>(_30), std::forward<decltype(_31)>(_31), std::forward<decltype(_32)>(_32), std::forward<decltype(_33)>(_33), std::forward<decltype(_34)>(_34), std::forward<decltype(_35)>(_35), std::forward<decltype(_36)>(_36), std::forward<decltype(_37)>(_37), std::forward<decltype(_38)>(_38), std::forward<decltype(_39)>(_39), std::forward<decltype(_40)>(_40), std::forward<decltype(_41)>(_41), std::forward<decltype(_42)>(_42), std::forward<decltype(_43)>(_43), std::forward<decltype(_44)>(_44), std::forward<decltype(_45)>(_45), std::forward<decltype(_46)>(_46), std::forward<decltype(_47)>(_47), std::forward<decltype(_48)>(_48), std::forward<decltype(_49)>(_49));
    };

    auto cnt = detail::overload_t{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c_error}(std::forward<T>(t));
    return detail::overload_t{f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50}(cnt, std::forward<T>(t), std::forward<F>(f));

    #pragma clang diagnostic pop
}

} // namespace decompose
